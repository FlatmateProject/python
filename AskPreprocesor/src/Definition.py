#-*- coding: utf-8 -*-

class Definition():

    def __init__(self):
        self.__symbols={"IDLE":"00",
                        "RD":"01",
                        "WR":"10",
                        "TMP:=RIN":"000",
                        "R0:=RIN":"001",
                        "R1:=RIN":"010",
                        "R2:=RIN":"011",
                        "R3:=RIN":"100",
                        "R4:=RIN":"101",
                        "R5:=RIN":"110",
                        "R6:=RIN":"111",
                        "Y<=TMP":"000",
                        "Y<=R0":"001",
                        "Y<=R1":"010",
                        "Y<=R2":"011",
                        "Y<=R3":"100",
                        "Y<=R4":"101",
                        "Y<=R5":"110",
                        "Y<=R6":"111",
                        "ROUT<=Z":"0",
                        "ROUT<=Y":"1",
                        "IR:=IR":"0",
                        "IR:=IN":"1",
                        "A<=ATMP":"000",
                        "A<=AD0":"001",
                        "A<=AD1":"010",
                        "A<=SP":"011",
                        "A<=PC":"100",
                        "A<=ATMP":"101",
                        "ATMPL:=RIN":"0000",
                        "ATMPH:=RIN":"0001",
                        "AD0L:=RIN":"0010",
                        "AD0H:=RIN":"0011",
                        "AD1L:=RIN":"0100",
                        "AD1H:=RIN":"0101",
                        "SPL:=RIN":"0110",
                        "SPH:=RIN":"0111",
                        "PCL:=RIN":"1000",
                        "PCH:=RIN":"1001",
                        "PC:=PC+1":"1010",
                        "AD0:=AD0+1":"1011",
                        "ATMP:=ATMP+1":"1100",
                        "AD0:=AD0-1":"1101",
                        "AD1:=AD1+1":"1110",
                        "NOOP":"1111",
                        "BA<=ATMPL":"0000",
                        "BA<=ATMPH":"0001",
                        "BA<=AD0L":"0010",
                        "BA<=AD0H":"0011",
                        "BA<=AD1L":"0100",
                        "BA<=AD1H":"0101",
                        "BA<=SPL":"0110",
                        "BA<=SPH":"0111",
                        "BA<=PCL":"1000",
                        "BA<=PCH":"1001",
                        "BA<=Z":"1111",
                        "AC:=AC":"0",
                        "AC:=Y":"1",
                        "DOUT<=Z":"00",
                        "DOUT<=AC":"01",
                        "DOUT<=F":"10",
                        "DOUT<=DIN":"11",
                        "Y<=DIN":"0000",
                        "Y<=0":"0001",
                        "Y<=AC+DIN":"0010",
                        "Y<=AC-DIN":"0011",
                        "Y<=AC or DIN":"0100",
                        "Y<=AC and DIN":"0101",
                        "Y<=AC xor DIN":"0110",
                        "Y<=DIN":"0111",
                        "Y<=not AC":"1000",
                        "Y<=-AC":"1001",
                        "Y<=AC+DIN+C":"1010",
                        "Y<=AC-DIN-C":"1011",
                        "Y<=AC-1":"1100",
                        "Y<=AC+1":"1101",
                        "Y<=AC shl 1":"1110",
                        "Y<=AC shr 1":"1111",
                        "JV":"000",
                        "JC":"001",
                        "JZ":"010",
                        "JS":"011",
                        "J0":"100",
                        "J1":"101",
                        "0":"0",
                        "1":"1",
                        "NOOP":"0000",
                        "SRIN<=IRREG":"0001",
                        "SRO<=IRREG":"0010",
                        "SBA<=IRRA":"0011",
                        "SAIN<=IRRA":"0100",
                        "SA<=IRRA":"0101",
                        "SRIN<=IRREG+1":"1001",
                        "SRO<=IRREG+1":"1010",
                        "SBA<=IRRA+1":"1011",
                        "SAIN<=IRRA+1":"1100",
                        "SA<=IRRA+1":"1101"
            }

    def denary2Binary(self,n,i):
        bStr = ''
        if n < 0: raise ValueError, "must be a positive integer"
        if n == 0: return '0'
        while n > 0 or i>0:
            bStr = str(n % 2) + bStr
            n = n >> 1
            i-=1;
        return bStr

    def printLn(self,e,c,first,length):
        print('%s\t%s\t%s\t%s\t%s\t%s\t%s\t%s\t%s\t%s\t%s\t%s\t%s\t%s\t%s\t%s\t\t%s'
              % (self.denary2Binary(first,length),
              self.__symbols[e[0]],self.__symbols[e[1]],self.__symbols[e[2]],
              self.__symbols[e[3]],self.__symbols[e[4]],self.__symbols[e[5]],
              self.__symbols[e[6]],self.__symbols[e[7]],self.__symbols[e[8]],
              self.__symbols[e[9]],self.__symbols[e[10]],self.__symbols[e[11]],
              self.__symbols[e[12]],self.__symbols[e[13]],self.__symbols[e[14]],c));
